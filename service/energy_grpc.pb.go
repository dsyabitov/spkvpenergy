// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EnergyClient is the client API for Energy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnergyClient interface {
	Ping(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringResponse, error)
	ChartData(ctx context.Context, in *ChartDataRequest, opts ...grpc.CallOption) (*ChartDataResponse, error)
	Events(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (*EventsResponse, error)
	LastData(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (Energy_LastDataClient, error)
}

type energyClient struct {
	cc grpc.ClientConnInterface
}

func NewEnergyClient(cc grpc.ClientConnInterface) EnergyClient {
	return &energyClient{cc}
}

func (c *energyClient) Ping(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, "/service.Energy/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *energyClient) ChartData(ctx context.Context, in *ChartDataRequest, opts ...grpc.CallOption) (*ChartDataResponse, error) {
	out := new(ChartDataResponse)
	err := c.cc.Invoke(ctx, "/service.Energy/ChartData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *energyClient) Events(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (*EventsResponse, error) {
	out := new(EventsResponse)
	err := c.cc.Invoke(ctx, "/service.Energy/Events", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *energyClient) LastData(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (Energy_LastDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &Energy_ServiceDesc.Streams[0], "/service.Energy/LastData", opts...)
	if err != nil {
		return nil, err
	}
	x := &energyLastDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Energy_LastDataClient interface {
	Recv() (*LastDataResponse, error)
	grpc.ClientStream
}

type energyLastDataClient struct {
	grpc.ClientStream
}

func (x *energyLastDataClient) Recv() (*LastDataResponse, error) {
	m := new(LastDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EnergyServer is the server API for Energy service.
// All implementations must embed UnimplementedEnergyServer
// for forward compatibility
type EnergyServer interface {
	Ping(context.Context, *StringRequest) (*StringResponse, error)
	ChartData(context.Context, *ChartDataRequest) (*ChartDataResponse, error)
	Events(context.Context, *EventsRequest) (*EventsResponse, error)
	LastData(*StringRequest, Energy_LastDataServer) error
	mustEmbedUnimplementedEnergyServer()
}

// UnimplementedEnergyServer must be embedded to have forward compatible implementations.
type UnimplementedEnergyServer struct {
}

func (UnimplementedEnergyServer) Ping(context.Context, *StringRequest) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedEnergyServer) ChartData(context.Context, *ChartDataRequest) (*ChartDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChartData not implemented")
}
func (UnimplementedEnergyServer) Events(context.Context, *EventsRequest) (*EventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (UnimplementedEnergyServer) LastData(*StringRequest, Energy_LastDataServer) error {
	return status.Errorf(codes.Unimplemented, "method LastData not implemented")
}
func (UnimplementedEnergyServer) mustEmbedUnimplementedEnergyServer() {}

// UnsafeEnergyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnergyServer will
// result in compilation errors.
type UnsafeEnergyServer interface {
	mustEmbedUnimplementedEnergyServer()
}

func RegisterEnergyServer(s grpc.ServiceRegistrar, srv EnergyServer) {
	s.RegisterService(&Energy_ServiceDesc, srv)
}

func _Energy_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnergyServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Energy/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnergyServer).Ping(ctx, req.(*StringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Energy_ChartData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChartDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnergyServer).ChartData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Energy/ChartData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnergyServer).ChartData(ctx, req.(*ChartDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Energy_Events_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnergyServer).Events(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Energy/Events",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnergyServer).Events(ctx, req.(*EventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Energy_LastData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StringRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnergyServer).LastData(m, &energyLastDataServer{stream})
}

type Energy_LastDataServer interface {
	Send(*LastDataResponse) error
	grpc.ServerStream
}

type energyLastDataServer struct {
	grpc.ServerStream
}

func (x *energyLastDataServer) Send(m *LastDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Energy_ServiceDesc is the grpc.ServiceDesc for Energy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Energy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Energy",
	HandlerType: (*EnergyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Energy_Ping_Handler,
		},
		{
			MethodName: "ChartData",
			Handler:    _Energy_ChartData_Handler,
		},
		{
			MethodName: "Events",
			Handler:    _Energy_Events_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LastData",
			Handler:       _Energy_LastData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service/energy.proto",
}
