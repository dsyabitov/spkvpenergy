// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "spkvpenergy/ocapi/models"
)

// FindDeviceByIDReader is a Reader for the FindDeviceByID structure.
type FindDeviceByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindDeviceByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindDeviceByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewFindDeviceByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewFindDeviceByIDOK creates a FindDeviceByIDOK with default headers values
func NewFindDeviceByIDOK() *FindDeviceByIDOK {
	return &FindDeviceByIDOK{}
}

/*FindDeviceByIDOK handles this case with default header values.

device response
*/
type FindDeviceByIDOK struct {
	Payload *models.Device
}

func (o *FindDeviceByIDOK) Error() string {
	return fmt.Sprintf("[GET /device/{id}][%d] findDeviceByIdOK  %+v", 200, o.Payload)
}

func (o *FindDeviceByIDOK) GetPayload() *models.Device {
	return o.Payload
}

func (o *FindDeviceByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Device)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindDeviceByIDDefault creates a FindDeviceByIDDefault with default headers values
func NewFindDeviceByIDDefault(code int) *FindDeviceByIDDefault {
	return &FindDeviceByIDDefault{
		_statusCode: code,
	}
}

/*FindDeviceByIDDefault handles this case with default header values.

unexpected error
*/
type FindDeviceByIDDefault struct {
	_statusCode int

	Payload *models.ErrorModel
}

// Code gets the status code for the find device by Id default response
func (o *FindDeviceByIDDefault) Code() int {
	return o._statusCode
}

func (o *FindDeviceByIDDefault) Error() string {
	return fmt.Sprintf("[GET /device/{id}][%d] findDeviceById default  %+v", o._statusCode, o.Payload)
}

func (o *FindDeviceByIDDefault) GetPayload() *models.ErrorModel {
	return o.Payload
}

func (o *FindDeviceByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
