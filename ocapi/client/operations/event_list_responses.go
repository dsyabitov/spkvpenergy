// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "spkvpenergy/ocapi/models"
)

// EventListReader is a Reader for the EventList structure.
type EventListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EventListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEventListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewEventListDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewEventListOK creates a EventListOK with default headers values
func NewEventListOK() *EventListOK {
	return &EventListOK{}
}

/*EventListOK handles this case with default header values.

events response
*/
type EventListOK struct {
	Payload []*models.DeviceEvent
}

func (o *EventListOK) Error() string {
	return fmt.Sprintf("[POST /event/list][%d] eventListOK  %+v", 200, o.Payload)
}

func (o *EventListOK) GetPayload() []*models.DeviceEvent {
	return o.Payload
}

func (o *EventListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEventListDefault creates a EventListDefault with default headers values
func NewEventListDefault(code int) *EventListDefault {
	return &EventListDefault{
		_statusCode: code,
	}
}

/*EventListDefault handles this case with default header values.

unexpected error
*/
type EventListDefault struct {
	_statusCode int

	Payload *models.ErrorModel
}

// Code gets the status code for the event list default response
func (o *EventListDefault) Code() int {
	return o._statusCode
}

func (o *EventListDefault) Error() string {
	return fmt.Sprintf("[POST /event/list][%d] eventList default  %+v", o._statusCode, o.Payload)
}

func (o *EventListDefault) GetPayload() *models.ErrorModel {
	return o.Payload
}

func (o *EventListDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*EventListBody event list body
swagger:model EventListBody
*/
type EventListBody struct {

	// is active
	IsActive int32 `json:"is_active,omitempty"`

	// is critical
	IsCritical int32 `json:"is_critical,omitempty"`

	// status
	Status int32 `json:"status,omitempty"`
}

// Validate validates this event list body
func (o *EventListBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *EventListBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EventListBody) UnmarshalBinary(b []byte) error {
	var res EventListBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
