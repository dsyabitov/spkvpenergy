// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "spkvpenergy/ocapi/models"
)

// EventLogReader is a Reader for the EventLog structure.
type EventLogReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EventLogReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEventLogOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewEventLogDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewEventLogOK creates a EventLogOK with default headers values
func NewEventLogOK() *EventLogOK {
	return &EventLogOK{}
}

/*EventLogOK handles this case with default header values.

Events for all company devices
*/
type EventLogOK struct {
	Payload models.EventLogResp
}

func (o *EventLogOK) Error() string {
	return fmt.Sprintf("[POST /device/events-log/{id}][%d] eventLogOK  %+v", 200, o.Payload)
}

func (o *EventLogOK) GetPayload() models.EventLogResp {
	return o.Payload
}

func (o *EventLogOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEventLogDefault creates a EventLogDefault with default headers values
func NewEventLogDefault(code int) *EventLogDefault {
	return &EventLogDefault{
		_statusCode: code,
	}
}

/*EventLogDefault handles this case with default header values.

unexpected error
*/
type EventLogDefault struct {
	_statusCode int

	Payload *models.ErrorModel
}

// Code gets the status code for the event log default response
func (o *EventLogDefault) Code() int {
	return o._statusCode
}

func (o *EventLogDefault) Error() string {
	return fmt.Sprintf("[POST /device/events-log/{id}][%d] eventLog default  %+v", o._statusCode, o.Payload)
}

func (o *EventLogDefault) GetPayload() *models.ErrorModel {
	return o.Payload
}

func (o *EventLogDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
