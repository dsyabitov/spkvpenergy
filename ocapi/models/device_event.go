// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeviceEvent device event
//
// swagger:model deviceEvent
type DeviceEvent struct {

	// allow change activity
	AllowChangeActivity int64 `json:"allow_change_activity,omitempty"`

	// category id
	CategoryID int64 `json:"category_id,omitempty"`

	// condition time
	ConditionTime int64 `json:"condition_time,omitempty"`

	// email notification
	EmailNotification string `json:"email_notification,omitempty"`

	// expression
	Expression string `json:"expression,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// is active
	IsActive int64 `json:"is_active,omitempty"`

	// is critical
	IsCritical int64 `json:"is_critical,omitempty"`

	// is old
	IsOld int64 `json:"is_old,omitempty"`

	// last log id
	LastLogID int64 `json:"last_log_id,omitempty"`

	// last update
	LastUpdate int64 `json:"last_update,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// params
	Params []*DeviceEventParamsItems0 `json:"params"`

	// sms notification
	SmsNotification string `json:"sms_notification,omitempty"`

	// status
	Status int64 `json:"status,omitempty"`

	// type
	Type int64 `json:"type,omitempty"`

	// uuid
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this device event
func (m *DeviceEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceEvent) validateParams(formats strfmt.Registry) error {
	if swag.IsZero(m.Params) { // not required
		return nil
	}

	for i := 0; i < len(m.Params); i++ {
		if swag.IsZero(m.Params[i]) { // not required
			continue
		}

		if m.Params[i] != nil {
			if err := m.Params[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("params" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this device event based on the context it is used
func (m *DeviceEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceEvent) contextValidateParams(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Params); i++ {

		if m.Params[i] != nil {
			if err := m.Params[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("params" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceEvent) UnmarshalBinary(b []byte) error {
	var res DeviceEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceEventParamsItems0 device event params items0
//
// swagger:model DeviceEventParamsItems0
type DeviceEventParamsItems0 struct {

	// code
	Code string `json:"code,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// index
	Index int64 `json:"index,omitempty"`

	// parameter id
	ParameterID int64 `json:"parameter_id,omitempty"`

	// precision
	Precision int64 `json:"precision,omitempty"`
}

// Validate validates this device event params items0
func (m *DeviceEventParamsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this device event params items0 based on context it is used
func (m *DeviceEventParamsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceEventParamsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceEventParamsItems0) UnmarshalBinary(b []byte) error {
	var res DeviceEventParamsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
